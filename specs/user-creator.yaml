openapi: '3.0.0'
info:
  title: Luna Creators Portal User API Docs
  description: 'basePath is /api/users'
  version: 1.0.0
servers:
  - url: 'https://creators-portals-api-staging-8lv8j.ondigitalocean.app/api/users'
tags:
  - name: onboarding
  - name: user
  - name: nft_collection

paths:
  /signup:
    post:
      tags:
        - onboarding
      summary: Signup User
      operationId: signUpUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpUserRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /login:
    post:
      tags:
        - onboarding
      summary: Login User
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /forgot-password:
    post:
      tags:
        - onboarding
      summary: Request for password reset code
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /change-password:
    post:
      tags:
        - onboarding
      summary: Endpoint to call when user has erceived code and wants to save new password
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  #  /connect-wallet:
  #    post:
  #      tags:
  #        - onboarding
  #      summary: Connect user wallet
  #      description: |
  #        1. Get the user Nonce by making an API request to get the user.
  #        2. Compose the string as follows: `Luna Creators Portal Login: ${user.nonce}`
  #        3. Let the user sign this with their wallet.
  #        4. Send public_address and signature in request
  #      requestBody:
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/AuthRequest'
  #      responses:
  #        '200':
  #          description: Ok
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/GenericResponse'
  #        '403':
  #          description: Forbidden
  #          content:
  #            application/json:
  #              schema:
  #                type: object
  #              example:
  #                error: true
  #                code: 403
  #                message: An admin public_address is required

  /me:
    get:
      tags:
        - user
      summary: Get full User info
      operationId: GetUser
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: User was not found
    put:
      tags:
        - user
      summary: Update User data
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /{public_address}/signing-info:
    parameters:
      - name: public_address
        in: path
        schema:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        required: true
    get:
      tags:
        - onboarding
      summary: Get user nonce for signing
      operationId: GetUserSigningInfo
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSigningInfoResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: User was not found

  /me/collections:
    post:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      operationId: createNftCollection
      summary: Create NFT collection for user
      description: |
        Set create_contract to false if you want to save progress and finish later.
        name and collection_name are always required
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg, image/gif
            schema: # Request payload
              type: object
              required:
                - name
                - collection_name
              properties:
                chain:
                  $ref: '#/components/schemas/SupportedChain'
                collection_id:
                  type: string
                  format: uuid
                  description: If continuation, specify the collection_id
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                quantity:
                  type: string
                  format: int32
                price:
                  type: string
                  format: double
                image:
                  type: string
                  format: binary
                royalties:
                  type: string
                  format: int32
                  description: In percentage, e.g 7
                  maximum: 100
                royalty_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                payout_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                attributes:
                  type: string
                  description: |
                    JSON stringified array of NftAttribute object
                  items:
                    $ref: '#/components/schemas/NftAttribute'
                agree_to_terms:
                  type: string
                  default: false
                understand_irreversible_action:
                  type: string
                track_ip_addresses:
                  type: string
                  default: false
                create_contract:
                  type: string
                  default: true
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    These are questions the user would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserCollectionResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      parameters:
        - name: name
          in: query
          description: Search part or whole of the collection name
          schema:
            type: string
          required: false
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/NftCollectionStatus'
          required: false
        - name: oldest_date
          in: query
          description: For the date filter, e.g Last 30 days
          schema:
            type: number
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
      operationId: getUserCollections
      summary: Get all user collections
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserCollectionsResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /me/collections/{collection_id}:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      operationId: updateCollectionInfo
      summary: Update a deployed collection info
      description: |
        Update a deployed collection info
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              collection_image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              properties:
                description:
                  type: string
                  minLength: 10
                  maxLength: 200
                about:
                  type: string
                  minLength: 20
                  maxLength: 1000
                collection_image:
                  type: string
                  format: binary
                track_ip_addresses:
                  type: string
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    These are questions the user would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
                main_link:
                  type: string
                  format: uri
                social_links:
                  description: |
                    JSON stringified array of CollectionSocialLink object
                  type: string
                  items:
                    $ref: '#/components/schemas/CollectionSocialLink'
                whitelist_host_addresses:
                  description: |
                    JSON stringified array of url strings
                  type: string
                  items:
                    type: string
                    format: uri
                checkout_background_color:
                  description: Color for checkout plugin background
                  type: string
                checkout_font:
                  description: Font for checkout plugin texts
                  type: string
                checkout_font_size:
                  description: Integer font size for checkout plugin texts
                  type: string
                checkout_font_color:
                  description: Hex Color for checkout plugin texts
                  type: string
                terms_and_condition_enabled:
                  description: Booelan Option to display T&C on checkout plugin
                  type: string
                  enum:
                    - true
                    - false
                terms_and_condition_link:
                  description: Link to T&C
                  type: string
                  format: uri
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCollectionResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      operationId: getCollectionInfo
      summary: Get collection info
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An user auth key is required

  /payments/{collection_id}/stripe-client-secret:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: save_card
        in: query
        schema:
          type: boolean
          default: false
        required: false
    get:
      tags:
        - nft_collection
      summary: Get Stripe Client secret that is used for payment
      description: |
        Query param 'save_card' indicates if thge user wants to save the card for later.
      operationId: getStripeClientSecret
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStripeClientSecretResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /payments/{collection_id}/charge-card:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - nft_collection
      summary: If user selects an existing card, send the card id over
      operationId: chargeCard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - card_id
              properties:
                card_id:
                  type: string
      responses:
        '200':
          description: |
            If status is REQUIRES_AUTH, see Section 6 of https://stripe.com/docs/payments/save-during-payment-cards-only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeCardResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-auth-token
    ClientID:
      type: apiKey
      in: header
      name: x-cient-id
      description: Unique identifier for each frontend browser/client
  responses:
    ErrorResponse401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
          example:
            error: true
            code: 401
            message: Authentication required.

  schemas:
    GenericResponse:
      properties:
        error:
          type: boolean
          example: false
        code:
          type: number
          example: 200
        message:
          type: string
          example: Successful

    Pagination:
      type: object
      properties:
        page:
          description: First page is page 1, default size if not specified is 50.
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        last_page:
          description: Last possible page
          type: integer
          format: int32
        total_count:
          type: integer
          format: int32
      example:
        page: 1
        size: 50
        last_page: 5
        total_count: 241

    SignUpUserRequest:
      type: object
      required:
        - email
        - password
        - invite_code
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        invite_code:
          type: string
          format: string

    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    SignUpUserResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/UserInfo'
                token:
                  type: string

    OnboardingType:
      type: string
      enum:
        - INVITED
        - ADMIN_CREATED

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nonce:
          type: number
        onboarding_type:
          $ref: '#/components/schemas/OnboardingType'
        name:
          type: string
          minLength: 3
          maxLength: 30
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        facebook:
          type: string
          format: uri
        instagram:
          type: string
          format: uri
        email:
          type: string
          format: email
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
        image:
          type: string
          format: uri
        banner:
          type: string
          format: uri

    GetUserResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserInfo'

    GetUserSigningInfoResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - public_address
                - nonce
                - created_at
                - updated_at
              properties:
                public_address:
                  type: string
                nonce:
                  type: number
                created_at:
                  type: string
                  format: 'date-time'
                updated_at:
                  type: string
                  format: 'date-time'

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        name:
          type: string
          minLength: 3
          maxLength: 50
        image:
          type: string
          format: binary
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        facebook:
          type: string
          format: uri
        instagram:
          type: string
          format: uri

    SupportedChain:
      type: string
      enum:
        - ethereum
        - polygon

    NftAttribute:
      type: object
      required:
        - trait_type
      properties:
        trait_type:
          type: string
        display_type:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean

    FirstPartyDatumType:
      type: string
      enum:
        - SHORT_TEXT
        - LONG_TEXT
        - EMAIL

    FirstPartyDatum:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        question:
          type: string
          default: Email
        is_required:
          type: boolean
          default: false

    UserNftCollectionInfo:
      type: object
      required:
        - chain
        - name
        - description
        - about
        - agree_to_terms
        - understand_irreversible_action
        - user_id
      properties:
        chain:
          $ref: '#/components/schemas/SupportedChain'
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          minLength: 10
          maxLength: 200
        about:
          type: string
          minLength: 20
          maxLength: 1000
        royalty_address:
          type: string
        payout_address:
          type: string
        contract_address:
          type: string
        image:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/NftCollectionStatus'
        agree_to_terms:
          type: boolean
        understand_irreversible_action:
          type: boolean
        track_ip_addresses:
          type: boolean
          default: false
        first_party_data:
          description: These are questions the user would want to collect from minters.
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyDatum'
        checkout_background_color:
          description: Color for checkout plugin background
          type: string
        checkout_font:
          description: Font for checkout plugin texts
          type: string
        checkout_font_size:
          description: Integer font size for checkout plugin texts
          type: string
        checkout_font_color:
          description: Hex Color for checkout plugin texts
          type: string
        terms_and_condition_enabled:
          description: Booelan Option to display T&C on checkout plugin
          type: string
          enum:
            - true
            - false
        terms_and_condition_link:
          description: Link to T&C
          type: string
          format: uri
        payment_option:
          $ref: '#/components/schemas/PaymentOption'
        fees_estimate_crypto:
          type: string
        fees_estimate_usd:
          type: string
        payment_client_id:
          description: Stripe client secret
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetAllUserCollectionsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserNftCollectionInfo'

    GetUserCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserNftCollectionInfo'

    CreateUserCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/UserNftCollectionInfo'
                - type: object
                  properties:
                    payment_cards:
                      type: array
                      items:
                        $ref: '#/components/schemas/PaymentCard'

    NftCollectionStatus:
      type: string
      enum:
        - DRAFT
        - PROCESSING_PAYMENT
        - DEPLOYMENT_IN_PROGRESS
        - DEPLOYED
        - DEPLOYMENT_FAILED
        - PAYMENT_PENDING
        - PAYMENT_FAILED

    CollectionSocialLink:
      type: object
      example:
        "name": "twitter"
        "url": "https://www.twitter.com/@my_username"
        "enabled": true
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        enabled:
          type: boolean
          default: false

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ChangePasswordRequest:
      type: object
      required:
        - email
        - password
        - otp
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        otp:
          type: string

    AuthRequest:
      type: object
      properties:
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        signature:
          type: string
          minLength: 10

    PaymentOption:
      type: string
      enum:
        - CRYPTO
        - CREDIT_CARD

    PaymentCard:
      type: object
      properties:
        id:
          type: string
        brand:
          type: string
        exp_month:
          type: number
        exp_year:
          type: number
        last4:
          type: string

    GetStripeClientSecretResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - organization_id
                - client_secret
              properties:
                organization_id:
                  type: string
                client_secret:
                  type: string

    ChargeCardResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - status
                - organization_id
                - card_id
              properties:
                status:
                  type: string
                  enum:
                    - SUCCESSFUL
                    - REQUIRES_AUTHENTICATION
                    - FAILED
                organization_id:
                  type: string
                client_secret:
                  type: string
                card_id:
                  type: string

