openapi: '3.0.0'
info:
  title: Luna Creators Portal User API Docs
  description: 'basePath is /api/users'
  version: 1.0.0
servers:
  - url: 'https://creators-portals-api-staging-8lv8j.ondigitalocean.app/api/users'
tags:
  - name: onboarding
  - name: user
  - name: nft_collection
  - name: credit_card
  - name: payout
security:
  - ClientID: [ ]

paths:
  /signup:
    post:
      tags:
        - onboarding
      summary: Signup User
      operationId: signUpUser
      description: |
        Fields 'public_address' and 'signature' can be added when a user is trying to connect their wallet
        during signup.
        <br/>TO GET THE signature:
        <br/>
        Compose the string as follows: `Luna Creators Portal Signup: ${invite_code}`
        <br/>
        Then let the user sign this with their wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpUserRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /login:
    post:
      tags:
        - onboarding
      summary: Login User
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /forgot-password:
    post:
      tags:
        - onboarding
      summary: Request for password reset code
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /change-password:
    post:
      tags:
        - onboarding
      summary: Endpoint to call when user has erceived code and wants to save new password
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /connect-wallet:
    post:
      tags:
        - onboarding
      summary: Connect user wallet
      operationId: connectUserWallet
      security:
        - ApiKeyAuth: [ ]
      description: |
        1. Note that this endpoint is for users to connect their wallet after they have initially signed in with email and password so they they can login with their wallet later in the future.
        2. Compose the string as follows: `Luna Creators Portal Login: ${user.nonce}`
        3. Let the user sign this with their wallet.
        4. Send public_address and signature in request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /me:
    get:
      tags:
        - user
      summary: Get full User info
      operationId: GetUser
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: User was not found
    put:
      tags:
        - user
      summary: Update User data
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /{public_address}/signing-info:
    parameters:
      - name: public_address
        in: path
        schema:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        required: true
    get:
      tags:
        - onboarding
      summary: Get user nonce for signing
      operationId: GetUserSigningInfo
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSigningInfoResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: User was not found

  /me/collections:
    post:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      operationId: createNftCollection
      summary: Create NFT collection for user
      description: |
        Set create_contract to false if you want to save progress and finish later.
        name and collection_name are always required
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg, image/gif
            schema: # Request payload
              type: object
              required:
                - name
                - collection_name
              properties:
                chain:
                  $ref: '#/components/schemas/SupportedChain'
                collection_id:
                  type: string
                  format: uuid
                  description: If continuation, specify the collection_id
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                quantity:
                  type: string
                  format: int32
                price:
                  type: string
                  format: double
                image:
                  type: string
                  format: binary
                royalties:
                  type: string
                  format: int32
                  description: In percentage, e.g 7
                  maximum: 100
                royalty_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                attributes:
                  type: string
                  description: |
                    JSON stringified array of NftAttribute object
                  items:
                    $ref: '#/components/schemas/NftAttribute'
                understand_irreversible_action:
                  type: string
                track_ip_addresses:
                  type: string
                  default: false
                create_contract:
                  type: string
                  default: true
                payment_option:
                  $ref: '#/components/schemas/PaymentOption'
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    These are questions the user would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCollectionResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: name
          in: query
          description: Search part or whole of the collection name
          schema:
            type: string
          required: false
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/NftCollectionStatus'
          required: false
        - name: oldest_date
          in: query
          description: For the date filter, e.g Last 30 days
          schema:
            type: number
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      operationId: getUserCollections
      summary: Get all user collections
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllUserCollectionsResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /me/collections/{collection_id}:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
        - ClientID: [ ]
      operationId: updateCollectionInfo
      summary: Update a deployed collection info
      description: |
        Update a deployed collection info
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              collection_image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              properties:
                description:
                  type: string
                  minLength: 10
                  maxLength: 200
                about:
                  type: string
                  minLength: 20
                  maxLength: 1000
                collection_image:
                  type: string
                  format: binary
                track_ip_addresses:
                  type: string
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    These are questions the user would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
                main_link:
                  type: string
                  format: uri
                social_links:
                  description: |
                    JSON stringified array of CollectionSocialLink object
                  type: string
                  items:
                    $ref: '#/components/schemas/CollectionSocialLink'
                whitelist_host_addresses:
                  description: |
                    JSON stringified array of url strings
                  type: string
                  items:
                    type: string
                    format: uri
                checkout_background_color:
                  description: Color for checkout plugin background
                  type: string
                checkout_font:
                  description: Font for checkout plugin texts
                  type: string
                checkout_font_size:
                  description: Integer font size for checkout plugin texts
                  type: string
                checkout_font_color:
                  description: Hex Color for checkout plugin texts
                  type: string
                terms_and_condition_enabled:
                  description: Booelan Option to display T&C on checkout plugin
                  type: string
                  enum:
                    - true
                    - false
                terms_and_condition_link:
                  description: Link to T&C
                  type: string
                  format: uri
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCollectionResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      operationId: getCollectionInfo
      summary: Get collection info
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An user auth key is required

  /wallet-auth:
    post:
      tags:
        - auth
      summary: Sign in user with crypto wallet
      operationId: walletSignInUser
      description: |
        1. Get the user Nonce by making an API request to get the user.
        2. Compose the string as follows: `Luna Creators Portal Login: ${user.nonce}`
        3. Let the user sign this with their wallet.
        4. Send public_address and signature in request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpUserResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /me/payments/cards:
    get:
      tags:
        - credit_card
      summary: Get cards that the user has saved to be charged
      operationId: getUserSavedCards
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentCardsResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /me/payments/{collection_id}/stripe-client-secret:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: save_card
        in: query
        schema:
          type: boolean
          default: false
        required: false
    get:
      tags:
        - credit_card
      summary: Get Stripe Client secret that is used for payment
      description: |
        Query param 'save_card' indicates if thge user wants to save the card for later.
      operationId: getStripeClientSecret
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStripeClientSecretResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /me/payments/{collection_id}/charge-card:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - credit_card
      summary: If user selects an existing card, send the card id over
      operationId: chargeCard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - card_id
              properties:
                card_id:
                  type: string
      responses:
        '200':
          description: |
            If status is REQUIRES_AUTH, see Section 6 of https://stripe.com/docs/payments/save-during-payment-cards-only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeCardResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /me/collections/{collection_id}/payouts:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - payout
      summary: Payout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutResponse'
        '400':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
    get:
      tags:
        - payout
      security:
        - ApiKeyAuth: [ ]
      operationId: getCollectionPayouts
      summary: Get collection payments
      parameters:
        - name: recipient_address
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: recipient_account_id
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPayoutsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /me/payments/bank-accounts:
    post:
      summary: Create user bank account
      tags:
        - bank_account
      description: A url is sent in the response, redirect the user to it so they can complete account on Stripe UI,
      operationId: createUserBankAccount
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBankAccountResponse'
        '400':
          description: If user already has an account
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 400
                message: Account already exists
    get:
      tags:
        - bank_account
      summary: Get user bank accounts
      operationId: getUserBankAccounts
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBankAccountsResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /me/collections/{collection_id}/mints:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      operationId: getMintTransactions
      summary: Get Mint Transactions
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMintTransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 401
                message: Authentication required.

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-auth-token
    ClientID:
      type: apiKey
      in: header
      name: x-client-id
      description: Unique identifier for each frontend browser/client
  responses:
    ErrorResponse401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
          example:
            error: true
            code: 401
            message: Authentication required.

  schemas:
    GenericResponse:
      properties:
        error:
          type: boolean
          example: false
        code:
          type: number
          example: 200
        message:
          type: string
          example: Successful

    Pagination:
      type: object
      properties:
        page:
          description: First page is page 1, default size if not specified is 50.
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        last_page:
          description: Last possible page
          type: integer
          format: int32
        total_count:
          type: integer
          format: int32
      example:
        page: 1
        size: 50
        last_page: 5
        total_count: 241

    SignUpUserRequest:
      type: object
      required:
        - email
        - password
        - invite_code
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        invite_code:
          type: string
        public_address:
          type: string
        signature:
          type: string

    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    SignUpUserResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/UserInfo'
                token:
                  type: string

    OnboardingType:
      type: string
      enum:
        - INVITED
        - ADMIN_CREATED

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nonce:
          type: number
        onboarding_type:
          $ref: '#/components/schemas/OnboardingType'
        name:
          type: string
          minLength: 3
          maxLength: 30
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        facebook:
          type: string
          format: uri
        instagram:
          type: string
          format: uri
        email:
          type: string
          format: email
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
        image:
          type: string
          format: uri
        banner:
          type: string
          format: uri

    GetUserResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserInfo'

    GetUserSigningInfoResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - public_address
                - nonce
                - created_at
                - updated_at
              properties:
                public_address:
                  type: string
                nonce:
                  type: number
                created_at:
                  type: string
                  format: 'date-time'
                updated_at:
                  type: string
                  format: 'date-time'

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        name:
          type: string
          minLength: 3
          maxLength: 50
        image:
          type: string
          format: binary
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        facebook:
          type: string
          format: uri
        instagram:
          type: string
          format: uri

    SupportedChain:
      type: string
      enum:
        - ethereum
        - polygon

    NftAttribute:
      type: object
      required:
        - trait_type
      properties:
        trait_type:
          type: string
        display_type:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean

    FirstPartyDatumType:
      type: string
      enum:
        - SHORT_TEXT
        - LONG_TEXT
        - EMAIL

    FirstPartyDatum:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        question:
          type: string
          default: Email
        is_required:
          type: boolean
          default: false

    UserNftCollectionInfo:
      type: object
      required:
        - chain
        - name
        - description
        - about
        - agree_to_terms
        - understand_irreversible_action
        - user_id
      properties:
        chain:
          $ref: '#/components/schemas/SupportedChain'
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          minLength: 10
          maxLength: 200
        about:
          type: string
          minLength: 20
          maxLength: 1000
        royalty_address:
          type: string
        contract_address:
          type: string
        image:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/NftCollectionStatus'
        agree_to_terms:
          type: boolean
        understand_irreversible_action:
          type: boolean
        track_ip_addresses:
          type: boolean
          default: false
        first_party_data:
          description: These are questions the user would want to collect from minters.
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyDatum'
        checkout_background_color:
          description: Color for checkout plugin background
          type: string
        checkout_font:
          description: Font for checkout plugin texts
          type: string
        checkout_font_size:
          description: Integer font size for checkout plugin texts
          type: string
        checkout_font_color:
          description: Hex Color for checkout plugin texts
          type: string
        terms_and_condition_enabled:
          description: Booelan Option to display T&C on checkout plugin
          type: string
          enum:
            - true
            - false
        terms_and_condition_link:
          description: Link to T&C
          type: string
          format: uri
        contract_balance:
          description: balance for collection contract
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetAllUserCollectionsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserNftCollectionInfo'

    GetUserCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserNftCollectionInfo'

    CreateCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/UserNftCollectionInfo'
                - type: object
                  properties:
                    payment_option:
                      $ref: '#/components/schemas/PaymentOption'
                    fees_estimate_crypto:
                      type: string
                    fees_estimate_fiat:
                      type: string

    GetPaymentCardsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/PaymentCard'

    NftCollectionStatus:
      type: string
      enum:
        - DRAFT
        - PROCESSING_PAYMENT
        - DEPLOYMENT_IN_PROGRESS
        - DEPLOYED
        - DEPLOYMENT_FAILED
        - PAYMENT_PENDING
        - PAYMENT_FAILED

    CollectionSocialLink:
      type: object
      example:
        "name": "twitter"
        "url": "https://www.twitter.com/@my_username"
        "enabled": true
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        enabled:
          type: boolean
          default: false

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ChangePasswordRequest:
      type: object
      required:
        - email
        - password
        - otp
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        otp:
          type: string

    AuthRequest:
      type: object
      properties:
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        signature:
          type: string
          minLength: 10

    PaymentOption:
      type: string
      enum:
        - CRYPTO
        - CREDIT_CARD

    PaymentCard:
      type: object
      required:
        - id
        - brand
        - exp_month
        - exp_year
        - last4
      properties:
        id:
          type: string
        brand:
          type: string
        exp_month:
          type: number
        exp_year:
          type: number
        last4:
          type: string

    GetStripeClientSecretResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - user_id
                - client_secret
              properties:
                user_id:
                  type: string
                client_secret:
                  type: string

    ChargeCardResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - status
                - user_id
                - card_id
              properties:
                requires_auth:
                  type: boolean
                user_id:
                  type: string
                client_secret:
                  type: string
                card_id:
                  type: string

    Payout:
      type: object
      required:
        - id
        - collection_id
        - chain
        - method
        - recipient
        - amount
        - currency
        - amount_in_crypto
        - initiated_by
        - initiator_id
        - paid_at
      properties:
        id:
          type: string
          format: uuid
        collection_id:
          type: string
          format: uuid
        tx_hash:
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
        method:
          type: string
          enum:
            - CRYPTO
            - FIAT
        recipient:
          type: string
        amount:
          type: string
        currency:
          type: string
        amount_in_fiat:
          type: string
        amount_in_crypto:
          type: string
        bank_name:
          type: string
        initiated_by:
          type: string
          enum:
            - ADMIN
            - USER
        initiator_id:
          type: string
        paid_at:
          type: string
          format: 'date-time'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetAllPayoutsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Payout'
    PayoutRequest:
      type: object
      required:
        - method
        - password
      properties:
        recipient_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        method:
          type: string
          enum:
            - CRYPTO
            - FIAT
        password:
          type: string
        recipient_account_id:
          type: string

    PayoutResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Payout'

    CreateBankAccountResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CreateBankAccountData'

    CreateBankAccountData:
      type: object
      required:
        - url
        - created_at
        - expires_at
      properties:
        url:
          type: string
          format: uri
        created_at:
          type: number
        expires_at:
          type: number

    BankAccount:
      type: object
      required:
        - id
        - country
        - currency
        - last4
        - status
      properties:
        id:
          type: string
        account_holder_name:
          type: string
        account_holder_type:
          type: string
          enum:
            - individual
            - company
        account_type:
          type: string
        bank_name:
          type: string
        country:
          type: string
          description: Two-letter ISO code representing the country the bank account is located in.
        currency:
          type: string
        fingerprint:
          type: string
        last4:
          type: string
        metadata:
          type: object
        routing_number:
          type: string
        status:
          type: string
          enum:
            - new
            - validated
            - verified
            - verrification_failed
            - errored

    GetBankAccountsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/BankAccount'

    MintTransaction:
      type: object
      required:
        - id
        - collection_id
        - contract_address
        - to_address
        - quantity
        - price
        - minted_at
        - chain
        - tx_hash
        - method
      properties:
        id:
          type: string
          format: uuid
        collection_id:
          type: string
          format: uuid
        tx_hash:
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
        contract_address:
          type: string
        to_address:
          type: string
        quantity:
          type: number
        price:
          type: string
        minted_at:
          type: string
          format: 'date-time'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetMintTransactionResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MintTransaction'
