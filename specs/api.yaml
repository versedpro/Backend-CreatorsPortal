openapi: 3.0.0
info:
  title: luna-creators-portal
  version: 1.0.0
servers:
  - url: https://{{baseurl}}
tags:
  - name: admin
  - name: auth
  - name: organization
  - name: nft_collection

paths:
  /admin:
    post:
      tags:
        - admin
      summary: Signup Admin
      operationId: signUpAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpAdminRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAdminResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required
    get:
      tags:
        - admin
      summary: Get Admin
      operationId: GetAdmins
      parameters:
        - name: public_address
          in: query
          schema:
            type: string
            format: '/^0x[a-fA-F0-9]{40}$/'
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAdminsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: Token metadata was not found

  /admin/{public_address}:
    parameters:
      - name: public_address
        in: path
        schema:
          type: string
          format: '/^0x[a-fA-F0-9]{40}$/'
        required: true
    put:
      tags:
        - admin
      summary: Update Admin username
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAdminResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /auth/{user_type}:
    parameters:
      - name: user_type
        in: path
        schema:
          type: string
          enum:
            - admin
        required: true
    post:
      tags:
        - auth
      summary: Sign in admin
      description: |
        1. Get the user Nonce by making an API request to get the user.
        2. Compose the string as follows: `Luna Creators Portal Login: ${user.nonce}`
        3. Let the user sign this with their wallet.
        4. Send public_address and signature in request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /organizations:
    post:
      tags:
        - organization
      security:
        - ApiAuthKey: []
      operationId: addOrganization
      summary: Add Organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiAuthKey: []
      operationId: getOrganizationsInfo
      summary: Get all organizations info
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllOrganizationsInfoResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - organization
      security:
        - ApiAuthKey: []
      operationId: updateOrganization
      summary: Update organization info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiAuthKey: []
      operationId: getOrganization
      summary: Get organization
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: []
      operationId: createNftCollection
      summary: Create NFT collection for organization
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg, image/gif
              collection_image:
                contentType: image/png, image/jpeg
              collection_background_header:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              properties:
                blockchain:
                  $ref: '#/components/schemas/SupportedChain'
                name:
                  type: string
                  required: true
                  minLength: 3
                  maxLength: 30
                quantity:
                  type: integer
                  format: int32
                  default: 1
                  required: true
                  minimum: 1
                image:
                  type: string
                  format: binary
                  required: true
                royalties:
                  type: integer
                  format: int32
                  description: In percentage, e.g 7
                  required: true
                attributes:
                  type: array
                  required: false
                  items:
                    $ref: '#/components/schemas/NftAttribute'
                collection_name:
                  type: string
                  required: true
                  minLength: 3
                  maxLength: 30
                collection_description:
                  type: string
                  required: true
                  minLength: 10
                  maxLength: 200
                collection_about:
                  type: string
                  required: true
                  minLength: 20
                  maxLength: 1000
                collection_image:
                  type: string
                  format: binary
                  required: true
                collection_background_header:
                  type: string
                  format: binary
                  required: true
                agree_to_terms:
                  type: boolean
                  required: true
                understand_irreversible_action:
                  type: boolean
                  required: true
                track_ip_addresses:
                  type: boolean
                  required: true
                first_party_data:
                  description: These are questions the organization would want to collect from minters.
                  type: array
                  required: false
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: []
      operationId: getAllOrganizationCollections
      summary: Get All Organization Collections
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCollectionsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections/{collection_id}:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      operationId: updateCollectionInfo
      summary: Update collection info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNftCollectionInfoRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      operationId: getCollectionInfo
      summary: Get collection info
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections/{collection_id}/items:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      operationId: getCollectionNfts
      summary: Get collection NFT items in a paginated query
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNftsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-auth-token
  schemas:
    GenericResponse:
      properties:
        error:
          type: boolean
          example: false
        code:
          type: number
          example: 200
        message:
          type: string
          example: Successful

    Pagination:
      type: object
      properties:
        page:
          description: First page is page 1, default size if not specified is 50.
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        last_page:
          description: Last possible page
          type: integer
          format: int32
        total_count:
          type: integer
          format: int32
      example:
        page: 1
        size: 50
        last_page: 5
        total_count: 241

    SignUpAdminRequest:
      type: object
      properties:
        public_address:
          type: string
          required: true
          format: '/^0x[a-fA-F0-9]{40}$/'

    SignUpAdminResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AdminData'

    AdminData:
      type: object
      properties:
        public_address:
          type: string
        username:
          type: string
        nonce:
          type: number
      example:
        public_address: publicAddress
        username: lekky
        nonce: 345056

    GetAdminsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AdminData'

    UpdateAdminRequest:
      type: object
      properties:
        username:
          type: string
          required: true
          minLength: 3
          maxLength: 30

    AuthRequest:
      type: object
      properties:
        public_address:
          type: string
          format: '/^0x[a-fA-F0-9]{40}$/'
        signature:
          type: string
          minLength: 10

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                user:
                  oneOf:
                    - $ref: '#/components/schemas/AdminData'

    OrganizationType:
      type: string
      enum:
        - BRAND
        - COMMUNITY

    SupportedChain:
      type: string
      enum:
        - ethereum

    CreateOrganizationRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        admin_email:
          type: string
          format: email
        admin_name:
          type: string
        admin_wallet_address:
          type: string
          format: '/^0x[a-fA-F0-9]{40}$/'

    OrganizationInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        admin_email:
          type: string
          format: email
        admin_name:
          type: string
        admin_wallet_address:
          type: string
          format: '/^0x[a-fA-F0-9]{40}$/'

    UpdateOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInfo'

    GetAllOrganizationsInfoResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationInfo'

    GetOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInfo'

    NftAttribute:
      type: object
      required:
        - trait_type
      properties:
        trait_type:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean

    FirstPartyDatumType:
      type: string
      enum:
        - SHORT_TEXT
        - LONG_TEXT
        - EMAIL

    FirstPartyDatum:
      type: object
      required:
        - type
      properties:
        question_type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        quesstion:
          type: string
          required: false
          default: Email
        is_required:
          type: boolean
          default: false

    TokenFormat:
      type: string
      enum:
        - ERC1155

    NftItem:
      type: object
      properties:
        name:
          required: true
          minLength: 3
          maxLength: 30
        amount:
          type: integer
          format: int32
          default: 1
          required: true
          minimum: 1
        image:
          type: string
          format: uri
        image_data:
          required: false
          type: string
        royalties:
          type: integer
          format: int32
          description: In percentage, e.g 7
          required: true
        attributes:
          type: array
          required: false
          items:
            $ref: '#/components/schemas/NftAttribute'
        description:
          type: string
        external_url:
          type: string
        chain:
          type: string
        background_color:
          type: string
        token_format:
          $ref: '#/components/schemas/TokenFormat'
        animation_url:
          type: string
        youtube_url:
          type: string
        contract_address:
          type: string
        token_hash:
          type: string
        token_uri:
          type: string
        mint_voucher:
          type: string

    NftCollectionInfo:
      type: object
      properties:
        chain:
          $ref: '#/components/schemas/SupportedChain'
        name:
          type: string
          required: true
          minLength: 3
          maxLength: 30
        description:
          type: string
          required: true
          minLength: 10
          maxLength: 200
        about:
          type: string
          required: true
          minLength: 20
          maxLength: 1000
        contract_address:
          type: string
        image:
          type: string
          format: uri
        background_header:
          type: string
          format: uri
        agree_to_terms:
          type: boolean
          required: true
        understand_irreversible_action:
          type: boolean
          required: true
        track_ip_addresses:
          type: boolean
          required: true
        first_party_data:
          description: These are questions the organization would want to collect from minters.
          type: array
          required: false
          items:
            $ref: '#/components/schemas/FirstPartyDatum'
        created_at:
          type: date
        updated_at:
          type: date

    NftItemsArray:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NftItem'

    GetNftsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
        - $ref: '#/components/schemas/NftItemsArray'

    GetAllCollectionsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            data:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/NftCollectionInfo'

    GetCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/NftCollectionInfo'

    UpdateNftCollectionInfoRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          minLength: 10
          maxLength: 200
        about:
          type: string
          minLength: 20
          maxLength: 1000
        image:
          type: string
          format: uri
        background_header:
          type: string
          format: uri
