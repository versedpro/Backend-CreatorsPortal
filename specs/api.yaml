openapi: 3.0.0
info:
  title: Luna Creators Portal API Docs
  description: 'basePath is /api'
  version: 1.0.0
servers:
  - url: 'https://creators-portals-api-staging-8lv8j.ondigitalocean.app/api'
tags:
  - name: admin
  - name: auth
  - name: organization
  - name: nft_collection
  - name: organization_invite

paths:
  /admin:
    post:
      tags:
        - admin
      summary: Signup Admin
      operationId: signUpAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpAdminRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAdminResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required
    get:
      tags:
        - admin
      summary: Get Admin
      operationId: GetAdmins
      parameters:
        - name: public_address
          in: query
          schema:
            type: string
            pattern: (\b0x[a-fA-F0-9]{40}\b)
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAdminsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: Admin was not found

  /admin/{public_address}:
    parameters:
      - name: public_address
        in: path
        schema:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        required: true
    put:
      tags:
        - admin
      summary: Update Admin username
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              $ref: '#/components/schemas/UpdateAdminRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAdminResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /auth/admin:
    post:
      tags:
        - auth
      summary: Sign in admin
      description: |
        1. Get the admin Nonce by making an API request to get the user.
        2. Compose the string as follows: `Luna Creators Portal Login: ${user.nonce}`
        3. Let the admin sign this with their wallet.
        4. Send public_address and signature in request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /organizations:
    post:
      tags:
        - organization
      security:
        - ApiKeyAuth: [ ]
      operationId: addOrganization
      summary: Add Organization
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                email:
                  type: string
                  format: email
                image:
                  type: string
                  format: binary

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiKeyAuth: [ ]
      operationId: getOrganizationsInfo
      summary: Get all organizations info
      parameters:
        - name: name
          description: part of the organization name
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: type
          description: organization type
          in: query
          schema:
            $ref: '#/components/schemas/OrganizationType'
          required: false
        - name: email
          description: part of the admin email
          in: query
          schema:
            type: string
            minLength: 3
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllOrganizationsInfoResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - organization
      security:
        - ApiKeyAuth: [ ]
      operationId: updateOrganization
      summary: Update organization info
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
              banner:
                contentType: image/png, image/jpeg
            schema: # Request payload
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiKeyAuth: [ ]
      operationId: getOrganization
      summary: Get organization
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/invites:
    post:
      tags:
        - organization_invite
      security:
        - ApiKeyAuth: [ ]
      operationId: inviteOrganization
      summary: Invite an organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteOrganizationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization_invite
      security:
        - ApiKeyAuth: [ ]
      operationId: getOrganizationInvites
      summary: Get all organizations invites
      parameters:
        - name: keyword
          description: part of the organization name or email
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: status
          description: filter by status
          in: query
          schema:
            $ref: '#/components/schemas/InviteStatus'
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllOrganizationsInvitesResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/invites/{invite_id}:
    parameters:
      - name: invite_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    delete:
      tags:
        - organization_invite
      security:
        - ApiKeyAuth: [ ]
      operationId: deleteOrganizationInviteById
      summary: Delete organizations invite by ID
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/invites/{invite_id}/resend:
    parameters:
      - name: invite_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - organization_invite
      security:
        - ApiKeyAuth: [ ]
      operationId: resendOrganizationInvite
      summary: Resent organization invite by ID
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /invites/verify:
    get:
      tags:
        - organization_invite
      operationId: verifyOrgnizationInvite
      summary: Verify invite by invite_code
      description: |
        no x-auth-token needed
        When a user clicks on the link to signup; the link will look like this for exmaple
        https://lunamarketplace.vercel.app/signup?invite_code=I3RCnT7yE8O4vB5nGdbj&email=example@gmail.com
        You can get the details for this invite using the invite_code and see if it is still valid or not.
      parameters:
        - name: invite_code
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      operationId: createNftCollection
      summary: Create NFT collection for organization
      description: |
        Set create_contract to false if you want to save progress and finish later.
        name and collection_name are always required
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg, image/gif
            schema: # Request payload
              type: object
              required:
                - name
                - collection_name
              properties:
                chain:
                  $ref: '#/components/schemas/SupportedChain'
                collection_id:
                  type: string
                  format: uuid
                  description: If continuation, specify the collection_id
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                quantity:
                  type: string
                  format: int32
                price:
                  type: string
                  format: double
                image:
                  type: string
                  format: binary
                royalties:
                  type: string
                  format: int32
                  description: In percentage, e.g 7
                  maximum: 100
                royalty_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                attributes:
                  type: string
                  description: |
                    JSON stringified array of NftAttribute object
                  items:
                    $ref: '#/components/schemas/NftAttribute'
                understand_irreversible_action:
                  type: string
                track_ip_addresses:
                  type: string
                  default: false
                create_contract:
                  type: string
                  default: true
                is_multiple_nft:
                  description: set to true for multiple NFTs
                  type: string
                  default: false
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    <br/>These are questions the organization would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: name
          in: query
          description: Search part or whole of the collection name
          schema:
            type: string
          required: false
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/NftCollectionStatus'
          required: false
        - name: oldest_date
          in: query
          description: For the date filter, e.g Last 30 days
          schema:
            type: number
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      operationId: getAllOrganizationCollections
      summary: Get All Organization Collections
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCollectionsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections/{collection_id}/assets:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      operationId: addNftCollectionAssets
      summary: Upload up to 20 assets at once for a collection
      description: |
        Upload a max of 20 asset files,
        For each file, also add the asset data, the file_id is a randomly generated id on your end
        it is just for the purpose of identifying the asset_id
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              assets:
                contentType: image/png, image/jpeg, image/gif, video/mp4
            schema: # Request payload
              type: object
              required:
                - assets
                - assets_data
              properties:
                assets:
                  type: array
                  items:
                    type: string
                    format: binary
                assets_data:
                  description: |
                    JSON stringified array of AssetUploadData array
                  type: string
                  items:
                    $ref: '#/components/schemas/AssetUploadData'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCollectionAssetResponse'
    put:
      tags:
        - nft_collection
      summary: Update assets data; e.g name, quantity, price, attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionAssetDataRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
    delete:
      tags:
        - nft_collection
      summary: Delete assets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveAssetRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveCollectionAssetsResponse'
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: assets_ids
          in: query
          schema:
            type: array
            items:
              type: string
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      operationId: getCollectionAssets
      summary: Get All Collection Assets
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionAssetsResponse'

  /organizations/{organization_id}/collections/{collection_id}:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      operationId: updateCollectionInfo
      summary: Update a deployed collection info
      description: |
        Update a deployed collection info
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              collection_image:
                contentType: image/png, image/jpeg
              collection_background_header:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              properties:
                description:
                  type: string
                  minLength: 10
                  maxLength: 200
                about:
                  type: string
                  minLength: 20
                  maxLength: 1000
                collection_image:
                  type: string
                  format: binary
                collection_background_header:
                  type: string
                  format: binary
                track_ip_addresses:
                  type: string
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    <br/>These are questions the organization would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
                main_link:
                  type: string
                  format: uri
                social_links:
                  description: |
                    JSON stringified array of CollectionSocialLink object
                  type: string
                  items:
                    $ref: '#/components/schemas/CollectionSocialLink'
                whitelist_host_addresses:
                  description: |
                    JSON stringified array of url strings
                  type: string
                  items:
                    type: string
                    format: uri
                checkout_background_color:
                  description: Color for checkout plugin background
                  type: string
                checkout_font:
                  description: Font for checkout plugin texts
                  type: string
                checkout_font_size:
                  description: Integer font size for checkout plugin texts
                  type: string
                checkout_font_color:
                  description: Hex Color for checkout plugin texts
                  type: string
                terms_and_condition_enabled:
                  description: Booelan Option to display T&C on checkout plugin
                  type: string
                  enum:
                    - true
                    - false
                terms_and_condition_link:
                  description: Link to T&C
                  type: string
                  format: uri
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      operationId: getCollectionInfo
      summary: Get collection info
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /mint/{collection_id}/answers:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: wallet_address
          in: query
          schema:
            type: string
          required: false
        - name: question_type
          in: query
          schema:
            $ref: '#/components/schemas/FirstPartyDatumType'
          required: false
        - name: question
          in: query
          description: filter by part or whole of the question
          schema:
            type: string
          required: false
        - name: oldest_date
          in: query
          description: For the date filter, e.g Last 30 days
          schema:
            type: number
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
      operationId: getMintQuestionAnswers
      summary: Get Mint Question Answers
      description: |
        Creator endpoint to get all answers to the mint questions.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMintAnswersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 401
                message: Authentication required.

  /organizations/{organization_id}/collections/{collection_id}/payouts:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - payout
      summary: Payout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutResponse'
        '400':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
    get:
      tags:
        - payout
      security:
        - ApiKeyAuth: [ ]
      operationId: getCollectionPayouts
      summary: Get collection payments
      parameters:
        - name: recipient_address
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: recipient_account_id
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllPayoutsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/payments/bank-accounts:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      summary: Create user bank account
      tags:
        - bank_account
      description: A url is sent in the response, we should send this URL to the organization for them to complete their
      operationId: createUserBankAccount
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBankAccountResponse'
        '400':
          description: If user already has an account
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 400
                message: Account already exists
    get:
      tags:
        - bank_account
      summary: Get user bank accounts
      operationId: getUserBankAccounts
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBankAccountsResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'

  /organizations/{organization_id}/collections/{collection_id}/mints:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - nft_collection
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
        - name: date_sort
          in: query
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
          required: false
      operationId: getMintTransactions
      summary: Get Mint Transactions
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMintTransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 401
                message: Authentication required.

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-auth-token
    PluginAuth:
      type: http
      scheme: basic
  responses:
    ErrorResponse401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
          example:
            error: true
            code: 401
            message: Authentication required.
  schemas:
    GenericResponse:
      properties:
        error:
          type: boolean
          example: false
        code:
          type: number
          example: 200
        message:
          type: string
          example: Successful

    Pagination:
      type: object
      properties:
        page:
          description: First page is page 1, default size if not specified is 50.
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        last_page:
          description: Last possible page
          type: integer
          format: int32
        total_count:
          type: integer
          format: int32
      example:
        page: 1
        size: 50
        last_page: 5
        total_count: 241

    SignUpAdminRequest:
      type: object
      required:
        - public_address
      properties:
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)

    SignUpAdminResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AdminData'

    AdminData:
      type: object
      required:
        - public_address
        - nonce
        - created_at
        - updated_at
      properties:
        public_address:
          type: string
        username:
          type: string
        nonce:
          type: number
        image:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
      example:
        public_address: publicAddress
        username: lekky
        nonce: 345056
        image: 'https://luna-creators-portal-test.s3.amazonaws.com/admin_profile_pics/0x22a8cd3a7a07527b3447eb42db073342b36c1d49_593e1818-7f7d-4f90-bb47-22a0d022ed5f.png'
        created_at: '2022-05-25T13:38:57.920Z'
        updated_at: '2022-05-25T13:38:57.920Z'

    GetAdminsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AdminData'

    UpdateAdminRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        image:
          type: string
          format: binary

    AuthRequest:
      type: object
      properties:
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        signature:
          type: string
          minLength: 10

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                user:
                  $ref: '#/components/schemas/AdminData'

    OrganizationType:
      type: string
      enum:
        - BRAND
        - COMMUNITY

    SupportedChain:
      type: string
      enum:
        - ethereum
        - polygon

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        email:
          type: string
          format: email
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        image:
          type: string
          format: binary
        banner:
          type: string
          format: binary

    OnboardingType:
      type: string
      enum:
        - INVITED
        - ADMIN_CREATED

    OrganizationInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nonce:
          type: number
        onboarding_type:
          $ref: '#/components/schemas/OnboardingType'
        name:
          type: string
          minLength: 3
          maxLength: 30
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        facebook:
          type: string
          format: uri
        instagram:
          type: string
          format: uri
        email:
          type: string
          format: email
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
        image:
          type: string
          format: uri
        banner:
          type: string
          format: uri

    UpdateOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInfo'

    GetAllOrganizationsInfoResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  $ref: '#/components/schemas/OrganizationInfo'

    GetOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInfo'

    NftAttribute:
      type: object
      required:
        - trait_type
      properties:
        trait_type:
          type: string
        display_type:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean

    FirstPartyDatumType:
      type: string
      enum:
        - SHORT_TEXT
        - LONG_TEXT
        - EMAIL

    FirstPartyDatum:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        question:
          type: string
          default: Email
        is_required:
          type: boolean
          default: false

    TokenFormat:
      type: string
      enum:
        - ERC1155

    NftItem:
      type: object
      required:
        - name
        - amount
      properties:
        name:
          minLength: 3
          maxLength: 30
        amount:
          type: integer
          format: int32
          default: 1
          minimum: 1
        image:
          type: string
          format: uri
        image_64:
          type: string
          format: uri
        image_256:
          type: string
          format: uri
        image_512:
          type: string
          format: uri
        image_data:
          type: string
        royalties:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          description: percentage, e.g 7
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/NftAttribute'
        description:
          type: string
        external_url:
          type: string
        chain:
          type: string
        background_color:
          type: string
        token_format:
          $ref: '#/components/schemas/TokenFormat'
        animation_url:
          type: string
        youtube_url:
          type: string
        contract_address:
          type: string
        token_hash:
          type: string
        token_uri:
          type: string

    NftCollectionInfo:
      type: object
      required:
        - chain
        - name
        - description
        - about
        - agree_to_terms
        - understand_irreversible_action
      properties:
        id:
          type: string
          format: uuid
        organization_id:
          type: string
          format: uuid
        chain:
          $ref: '#/components/schemas/SupportedChain'
        name:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          minLength: 10
          maxLength: 200
        about:
          type: string
          minLength: 20
          maxLength: 1000
        royalty_address:
          type: string
        contract_address:
          type: string
        image:
          type: string
          format: uri
        background_header:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/NftCollectionStatus'
        agree_to_terms:
          type: boolean
        understand_irreversible_action:
          type: boolean
        track_ip_addresses:
          type: boolean
          default: false
        first_party_data:
          description: These are questions the organization would want to collect from minters.
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyDatum'
        checkout_background_color:
          description: Color for checkout plugin background
          type: string
        checkout_font:
          description: Font for checkout plugin texts
          type: string
        checkout_font_size:
          description: Integer font size for checkout plugin texts
          type: string
        checkout_font_color:
          description: Hex Color for checkout plugin texts
          type: string
        terms_and_condition_enabled:
          description: Booelan Option to display T&C on checkout plugin
          type: string
          enum:
            - true
            - false
        terms_and_condition_link:
          description: Link to T&C
          type: string
          format: uri
        contract_balance:
          description: balance for collection contract
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetAllCollectionsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/NftCollectionInfo'

    GetCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/NftCollectionInfo'

    NftCollectionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - DEPLOYED
        - DEPLOYMENT_IN_PROGRESS

    FirstPartyAnswers:
      type: object
      required:
        - question_type
        - question
        - answer
      properties:
        question_type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        question:
          type: string
          default: Email
        answer:
          type: string
      example:
        "question_type": "SHORT_TEXT"
        "question": "Name"
        "answer": "Hashcode"

    CollectionSocialLink:
      type: object
      example:
        "name": "twitter"
        "url": "https://www.twitter.com/@my_username"
        "enabled": true
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        enabled:
          type: boolean
          default: false

    PostMintAnswersResponse:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyAnswers'

    UserData:
      type: object
      required:
        - public_address
        - nonce
        - created_at
        - updated_at
      properties:
        public_address:
          type: string
        nonce:
          type: number
        username:
          type: string
        image:
          type: string
        name:
          type: string
          minLength: 3
          maxLength: 50
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        facebook:
          type: string
          format: uri
        instagram:
          type: string
          format: uri
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    InviteOrganizationRequest:
      type: object
      required:
        - name
        - contact_name
        - email
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        contact_name:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email

    InviteOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInvite'

    InviteStatus:
      type: string
      enum:
        - SIGNED_UP
        - NOT_SIGNED_UP
        - EXPIRED

    OrganizationInvite:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        contact_name:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        invite_code:
          type: string
        status:
          $ref: '#/components/schemas/InviteStatus'
        created_at:
          type: string
          format: 'date-time'
        expires_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetAllOrganizationsInvitesResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  $ref: '#/components/schemas/OrganizationInvite'

    Payout:
      type: object
      required:
        - id
        - collection_id
        - chain
        - method
        - recipient
        - amount
        - currency
        - amount_in_crypto
        - initiated_by
        - initiator_id
        - paid_at
      properties:
        id:
          type: string
          format: uuid
        collection_id:
          type: string
          format: uuid
        tx_hash:
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
        method:
          type: string
          enum:
            - CRYPTO
            - FIAT
        recipient:
          type: string
        amount:
          type: string
        currency:
          type: string
        amount_in_fiat:
          type: string
        amount_in_crypto:
          type: string
        bank_name:
          type: string
        initiated_by:
          type: string
          enum:
            - ADMIN
            - USER
        initiator_id:
          type: string
        paid_at:
          type: string
          format: 'date-time'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetAllPayoutsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Payout'

    MintTransaction:
      type: object
      required:
        - id
        - collection_id
        - contract_address
        - to_address
        - quantity
        - price
        - minted_at
        - chain
        - tx_hash
        - method
      properties:
        id:
          type: string
          format: uuid
        collection_id:
          type: string
          format: uuid
        tx_hash:
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
        contract_address:
          type: string
        to_address:
          type: string
        quantity:
          type: number
        price:
          type: string
        minted_at:
          type: string
          format: 'date-time'
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetMintTransactionResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MintTransaction'

    PayoutRequest:
      type: object
      required:
        - method
      properties:
        recipient_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        method:
          type: string
          enum:
            - CRYPTO
            - FIAT
        recipient_account_id:
          type: string

    PayoutResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Payout'

    CreateBankAccountResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CreateBankAccountData'

    CreateBankAccountData:
      type: object
      required:
        - url
        - created_at
        - expires_at
      properties:
        url:
          type: string
          format: uri
        created_at:
          type: number
        expires_at:
          type: number

    BankAccount:
      type: object
      required:
        - id
        - country
        - currency
        - last4
        - status
      properties:
        id:
          type: string
        account_holder_name:
          type: string
        account_holder_type:
          type: string
          enum:
            - individual
            - company
        account_type:
          type: string
        bank_name:
          type: string
        country:
          type: string
          description: Two-letter ISO code representing the country the bank account is located in.
        currency:
          type: string
        fingerprint:
          type: string
        last4:
          type: string
        metadata:
          type: object
        routing_number:
          type: string
        status:
          type: string
          enum:
            - new
            - validated
            - verified
            - verrification_failed
            - errored

    GetBankAccountsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/BankAccount'

    RemoveAssetRequest:
      type: object
      required:
        - assets_ids
      properties:
        assets_ids:
          type: array
          items:
            type: string
            format: uuid

    AssetUploadData:
      type: object
      required:
        - file_id
        - name
        - price
      properties:
        file_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 40
        quantity:
          type: integer
        price:
          type: number
        attributes:
          type: string
          description: |
            JSON stringified array of NftAttribute object
          items:
            $ref: '#/components/schemas/NftAttribute'

    AddCollectionAssetResponse:
      example:
        {
          "error": false,
          "code": 200,
          "data": {
            "your_file_id": "601b746a-e1ac-481f-8e27-d5aa8d7bb4c2"
          },
          "message": "Successful"
        }
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object

    RemoveCollectionAssetsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                type: string
                format: uuid

    GetCollectionAssetsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/NftItem'

    AssetUpdateData:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 40
        quantity:
          type: integer
        price:
          type: number
        attributes:
          type: string
          description: |
            JSON stringified array of NftAttribute object
          items:
            $ref: '#/components/schemas/NftAttribute'

    UpdateCollectionAssetDataRequest:
      type: object
      required:
        - assets_data
      properties:
        assets_data:
          type: array
          items:
            $ref: '#/components/schemas/AssetUpdateData'
