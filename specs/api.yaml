openapi: 3.0.0
info:
  title: luna-creators-portal
  description: 'basePath is /api'
  version: 1.0.0
servers:
  - url: https://creators-portals-api-staging-8lv8j.ondigitalocean.app/api
tags:
  - name: admin
  - name: auth
  - name: organization
  - name: nft_collection
  - name: nft

paths:
  /admin:
    post:
      tags:
        - admin
      summary: Signup Admin
      operationId: signUpAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpAdminRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAdminResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required
    get:
      tags:
        - admin
      summary: Get Admin
      operationId: GetAdmins
      parameters:
        - name: public_address
          in: query
          schema:
            type: string
            pattern: (\b0x[a-fA-F0-9]{40}\b)
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAdminsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: Admin was not found

  /admin/{public_address}:
    parameters:
      - name: public_address
        in: path
        schema:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        required: true
    put:
      tags:
        - admin
      summary: Update Admin username
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
            schema: # Request payload
              $ref: '#/components/schemas/UpdateAdminRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpAdminResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /auth/{user_type}:
    parameters:
      - name: user_type
        in: path
        schema:
          type: string
          enum:
            - admin
        required: true
    post:
      tags:
        - auth
      summary: Sign in admin
      description: |
        1. Get the user Nonce by making an API request to get the user.
        2. Compose the string as follows: `Luna Creators Portal Login: ${user.nonce}`
        3. Let the user sign this with their wallet.
        4. Send public_address and signature in request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin public_address is required

  /organizations:
    post:
      tags:
        - organization
      security:
        - ApiAuthKey: [ ]
      operationId: addOrganization
      summary: Add Organization
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
              banner:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                type:
                  $ref: '#/components/schemas/OrganizationType'
                website:
                  type: string
                  format: uri
                twitter:
                  type: string
                  format: uri
                discord:
                  type: string
                  format: uri
                admin_email:
                  type: string
                  format: email
                admin_name:
                  type: string
                admin_wallet_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                image:
                  type: string
                  format: binary
                banner:
                  type: string
                  format: binary

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiAuthKey: [ ]
      operationId: getOrganizationsInfo
      summary: Get all organizations info
      parameters:
        - name: name
          description: part of the organization name
          in: query
          schema:
            type: string
            minLength: 2
          required: false
        - name: type
          description: organization type
          in: query
          schema:
            $ref: '#/components/schemas/OrganizationType'
          required: false
        - name: admin_email
          description: part of the admin email
          in: query
          schema:
            type: string
            minLength: 3
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllOrganizationsInfoResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - organization
      security:
        - ApiAuthKey: [ ]
      operationId: updateOrganization
      summary: Update organization info
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg
              banner:
                contentType: image/png, image/jpeg
            schema: # Request payload
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiAuthKey: [ ]
      operationId: getOrganization
      summary: Get organization
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      operationId: createNftCollection
      summary: Create NFT collection for organization
      description: |
        Set create_contract to false if you want to save progress and finish later.
        name and collection_name are always required
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              image:
                contentType: image/png, image/jpeg, image/gif
              collection_image:
                contentType: image/png, image/jpeg
              collection_background_header:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              required:
                - name
                - collection_name
              properties:
                chain:
                  $ref: '#/components/schemas/SupportedChain'
                collection_id:
                  type: string
                  format: uuid
                  description: If continuation, specify the collection_id
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                quantity:
                  type: string
                  format: int32
                price:
                  type: string
                  format: double
                image:
                  type: string
                  format: binary
                royalties:
                  type: string
                  format: int32
                  description: In percentage, e.g 7
                  maximum: 100
                royalty_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                payout_address:
                  type: string
                  pattern: (\b0x[a-fA-F0-9]{40}\b)
                attributes:
                  type: string
                  description: |
                    JSON stringified array of NftAttribute object
                  items:
                    $ref: '#/components/schemas/NftAttribute'
                collection_name:
                  type: string
                  minLength: 3
                  maxLength: 30
                collection_description:
                  type: string
                  minLength: 10
                  maxLength: 200
                collection_about:
                  type: string
                  minLength: 20
                  maxLength: 1000
                collection_image:
                  type: string
                  format: binary
                collection_background_header:
                  type: string
                  format: binary
                agree_to_terms:
                  type: string
                  default: false
                understand_irreversible_action:
                  type: string
                track_ip_addresses:
                  type: string
                  default: false
                create_contract:
                  type: string
                  default: true
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    <br/>These are questions the organization would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      parameters:
        - name: name
          in: query
          description: Search part or whole of the collection name
          schema:
            type: string
          required: false
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/NftCollectionStatus'
          required: false
        - name: oldest_date
          in: query
          description: For the date filter, e.g Last 30 days
          schema:
            type: number
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
      operationId: getAllOrganizationCollections
      summary: Get All Organization Collections
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllCollectionsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /organizations/{organization_id}/collections/{collection_id}:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    put:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      operationId: updateCollectionInfo
      summary: Update a deployed collection info
      description: |
        Update a deployed collection info
      requestBody:
        content:
          multipart/form-data: # Media type
            encoding:
              collection_image:
                contentType: image/png, image/jpeg
              collection_background_header:
                contentType: image/png, image/jpeg
            schema: # Request payload
              type: object
              properties:
                description:
                  type: string
                  minLength: 10
                  maxLength: 200
                about:
                  type: string
                  minLength: 20
                  maxLength: 1000
                collection_image:
                  type: string
                  format: binary
                collection_background_header:
                  type: string
                  format: binary
                track_ip_addresses:
                  type: string
                first_party_data:
                  description: |
                    JSON stringified array of FirstPartyDatum object
                    <br/>These are questions the organization would want to collect from minters.
                  type: string
                  items:
                    $ref: '#/components/schemas/FirstPartyDatum'
                main_link:
                  type: string
                  format: uri
                social_links:
                  description: |
                    JSON stringified array of CollectionSocialLink object
                  type: string
                  items:
                    $ref: '#/components/schemas/CollectionSocialLink'
                whitelist_host_addresses:
                  description: |
                    JSON stringified array of url strings
                  type: string
                  items:
                    type: string
                    format: uri
                checkout_background_color:
                  description: Color for checkout plugin background
                  type: string
                checkout_font:
                  description: Font for checkout plugin texts
                  type: string
                  enum:
                    - SERIF
                    - SANS_SERIFF
                checkout_font_size:
                  description: Integer font size for checkout plugin texts
                  type: string
                checkout_font_color:
                  description: Hex Color for checkout plugin texts
                  type: string
                terms_and_condition_enabled:
                  description: Booelan Option to display T&C on checkout plugin
                  type: string
                  enum:
                    - true
                    - false
                terms_and_condition_link:
                  description: Link to T&C
                  type: string
                  format: uri
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      operationId: getCollectionInfo
      summary: Get collection info
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /nft/{collection_id}/metadata/{token_id}:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
        required: true
      - name: token_id
        in: path
        schema:
          type: string
        required: true
    get:
      tags:
        - nft
      summary: Get Metadata by token id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftItem'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 404
                message: Token metadata was not found

  /organizations/{organization_id}/keys:
    parameters:
      - name: organization_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      tags:
        - organization
      security:
        - ApiAuthKey: [ ]
      operationId: generateOrganizationKeys
      summary: Generate Organization API and secret keys
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateApiKeysResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required
    get:
      tags:
        - organization
      security:
        - ApiAuthKey: [ ]
      operationId: getOrganizationKeys
      summary: Get Organization API and secret keys
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeysResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 403
                message: An admin auth key is required

  /mint/{collection_id}/info:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - mint
      security:
        - PluginAuth: [ ]
      operationId: getMintInfo
      summary: Get mint info
      description: |
        This endpoint requires a Basic Authorization, i.eusername and password header authentication.
        <br/>Use the api key as username.
        <br/>Use the secret key as password.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftMintInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 401
                message: Authentication required.

  /mint/{collection_id}/answers:
    parameters:
      - name: collection_id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - nft_collection
      security:
        - ApiAuthKey: [ ]
      parameters:
        - name: wallet_address
          in: query
          schema:
            type: string
          required: false
        - name: question_type
          in: query
          schema:
            $ref: '#/components/schemas/FirstPartyDatumType'
          required: false
        - name: question
          in: query
          description: filter by part or whole of the question
          schema:
            type: string
          required: false
        - name: oldest_date
          in: query
          description: For the date filter, e.g Last 30 days
          schema:
            type: number
            format: int64
          required: false
        - name: page
          in: query
          schema:
            type: number
            format: int32
            default: 1
          required: false
        - name: size
          in: query
          schema:
            type: number
            format: int32
            default: 30
          required: false
      operationId: getMintQuestionAnswers
      summary: Get Mint Question Answers
      description: |
        Creator endpoint to get all answers to the mint questions.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMintAnswersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 401
                message: Authentication required.

    post:
      tags:
        - mint
      security:
        - PluginAuth: [ ]
      operationId: answerMintQuestions
      summary: Answer mint questions
      description: |
        Only call this endpoint if the collection has first_party_data that the user has to answer. 
        <br/>This endpoint requires a Basic Authorization, i.eusername and password header authentication.
        <br/>Use the api key as username.
        <br/>Use the secret key as password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMintRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMintAnswersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: true
                code: 401
                message: Authentication required.

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-auth-token
    PluginAuth:
      type: http
      scheme: basic
  schemas:
    GenericResponse:
      properties:
        error:
          type: boolean
          example: false
        code:
          type: number
          example: 200
        message:
          type: string
          example: Successful

    Pagination:
      type: object
      properties:
        page:
          description: First page is page 1, default size if not specified is 50.
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        last_page:
          description: Last possible page
          type: integer
          format: int32
        total_count:
          type: integer
          format: int32
      example:
        page: 1
        size: 50
        last_page: 5
        total_count: 241

    SignUpAdminRequest:
      type: object
      required:
        - public_address
      properties:
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)

    SignUpAdminResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AdminData'

    AdminData:
      type: object
      required:
        - public_address
        - nonce
        - created_at
        - updated_at
      properties:
        public_address:
          type: string
        username:
          type: string
        nonce:
          type: number
        image:
          type: string
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
      example:
        public_address: publicAddress
        username: lekky
        nonce: 345056
        image: 'https://luna-creators-portal-test.s3.amazonaws.com/admin_profile_pics/0x22a8cd3a7a07527b3447eb42db073342b36c1d49_593e1818-7f7d-4f90-bb47-22a0d022ed5f.png'
        created_at: '2022-05-25T13:38:57.920Z'
        updated_at: '2022-05-25T13:38:57.920Z'

    GetAdminsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AdminData'

    UpdateAdminRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        image:
          type: string
          format: binary

    AuthRequest:
      type: object
      properties:
        public_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        signature:
          type: string
          minLength: 10

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                user:
                  oneOf:
                    - $ref: '#/components/schemas/AdminData'

    OrganizationType:
      type: string
      enum:
        - BRAND
        - COMMUNITY

    SupportedChain:
      type: string
      enum:
        - ethereum

    CreateOrganizationRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        admin_email:
          type: string
          format: email
        admin_name:
          type: string
        admin_wallet_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        image:
          type: string
          format: binary
        banner:
          type: string
          format: binary

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        admin_email:
          type: string
          format: email
        admin_name:
          type: string
        admin_wallet_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        image:
          type: string
          format: binary
        banner:
          type: string
          format: binary

    OrganizationInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 30
        type:
          $ref: '#/components/schemas/OrganizationType'
        website:
          type: string
          format: uri
        twitter:
          type: string
          format: uri
        discord:
          type: string
          format: uri
        admin_email:
          type: string
          format: email
        admin_name:
          type: string
        admin_wallet_address:
          type: string
          pattern: (\b0x[a-fA-F0-9]{40}\b)
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
        image:
          type: string
          format: uri
        banner:
          type: string
          format: uri

    UpdateOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInfo'

    GetAllOrganizationsInfoResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  $ref: '#/components/schemas/OrganizationInfo'

    GetOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/OrganizationInfo'

    NftAttribute:
      type: object
      required:
        - trait_type
      properties:
        trait_type:
          type: string
        display_type:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean

    FirstPartyDatumType:
      type: string
      enum:
        - SHORT_TEXT
        - LONG_TEXT
        - EMAIL

    FirstPartyDatum:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        question:
          type: string
          default: Email
        is_required:
          type: boolean
          default: false

    TokenFormat:
      type: string
      enum:
        - ERC1155

    NftItem:
      type: object
      required:
        - name
        - amount
      properties:
        name:
          minLength: 3
          maxLength: 30
        amount:
          type: integer
          format: int32
          default: 1
          minimum: 1
        image:
          type: string
          format: uri
        image_data:
          type: string
        royalties:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          description: percentage, e.g 7
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/NftAttribute'
        description:
          type: string
        external_url:
          type: string
        chain:
          type: string
        background_color:
          type: string
        token_format:
          $ref: '#/components/schemas/TokenFormat'
        animation_url:
          type: string
        youtube_url:
          type: string
        contract_address:
          type: string
        token_hash:
          type: string
        token_uri:
          type: string

    NftCollectionInfo:
      type: object
      required:
        - chain
        - name
        - description
        - about
        - agree_to_terms
        - understand_irreversible_action
      properties:
        chain:
          $ref: '#/components/schemas/SupportedChain'
        name:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          minLength: 10
          maxLength: 200
        about:
          type: string
          minLength: 20
          maxLength: 1000
        royalty_address:
          type: string
        payout_address:
          type: string
        contract_address:
          type: string
        image:
          type: string
          format: uri
        background_header:
          type: string
          format: uri
        status:
          $ref: '#/components/schemas/NftCollectionStatus'
        agree_to_terms:
          type: boolean
        understand_irreversible_action:
          type: boolean
        track_ip_addresses:
          type: boolean
          default: false
        first_party_data:
          description: These are questions the organization would want to collect from minters.
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyDatum'
        checkout_background_color:
          description: Color for checkout plugin background
          type: string
        checkout_font:
          description: Font for checkout plugin texts
          type: string
          enum:
            - SERIF
            - SANS_SERIFF
        checkout_font_size:
          description: Integer font size for checkout plugin texts
          type: string
        checkout_font_color:
          description: Hex Color for checkout plugin texts
          type: string
        terms_and_condition_enabled:
          description: Booelan Option to display T&C on checkout plugin
          type: string
          enum:
            - true
            - false
        terms_and_condition_link:
          description: Link to T&C
          type: string
          format: uri
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'

    GetNftsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/NftItem'

    GetAllCollectionsResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pagination:
                  $ref: '#/components/schemas/Pagination'
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/NftCollectionInfo'

    GetCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/NftCollectionInfo'

    GenerateApiKeysResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            organization_id:
              type: string
              format: uuid
            api_key:
              type: string
            secret_key:
              type: string
            created_at:
              type: string
              format: 'date-time'
    GetApiKeysResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          properties:
            organization_id:
              type: string
              format: uuid
            api_key:
              type: string
            created_at:
              type: string
              format: 'date-time'

    NftCollectionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - DEPLOYED

    NftMintInfo:
      type: object
      required:
        - chain
        - name
        - description
        - about
        - contract_address
        - background_header
      properties:
        chain:
          $ref: '#/components/schemas/SupportedChain'
        name:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          minLength: 10
          maxLength: 200
        about:
          type: string
          minLength: 20
          maxLength: 1000
        contract_address:
          type: string
        image:
          type: string
          format: uri
        background_header:
          type: string
          format: uri
        first_party_data:
          description: These are questions the organization would want to collect from minters.
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyDatum'
        social_links:
          description: These are social links for the collection.
          type: array
          items:
            $ref: '#/components/schemas/CollectionSocialLink'
        checkout_background_color:
          description: Color for checkout plugin background
          type: string
        checkout_font:
          description: Font for checkout plugin texts
          type: string
          enum:
            - SERIF
            - SANS_SERIF
        checkout_font_size:
          description: Integer font size for checkout plugin texts
          type: string
        checkout_font_color:
          description: Hex Color for checkout plugin texts
          type: string
        terms_and_condition_enabled:
          description: Booelan Option to display T&C on checkout plugin
          type: string
          enum:
            - true
            - false
        terms_and_condition_link:
          description: Link to T&C
          type: string
          format: uri

    FirstPartyAnswers:
      type: object
      required:
        - question_type
        - question
        - answer
      properties:
        question_type:
          $ref: '#/components/schemas/FirstPartyDatumType'
        question:
          type: string
          default: Email
        answer:
          type: string
      example:
        {
          "question_type": "SHORT_TEXT",
          "question": "Name",
          "answer": "Hashcode"
        }

    PostMintRequest:
      type: object
      required:
        - wallet_address
        - answers
      properties:
        wallet_address:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyAnswers'

    CollectionSocialLink:
      type: object
      example:
        { "name": "twitter","url": "https://www.twitter.com/@my_username","enabled": true }
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        enabled:
          type: boolean
          default: false

    PostMintAnswersResponse:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/FirstPartyAnswers'
